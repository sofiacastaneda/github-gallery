//////////////////////////////////////////////////
/*====PIPETA======*/
/*====Modo Pintura======*/
//////////////////////////////////////////////////

//////////////////////////////////////////////////
var serial;          // variable para acceder a serialport library
let portName = '/dev/tty.usbmodem142401';  
//////////////////////////////////////////////////

//=* marcadores
var circleA = 0;
var circleB = 0;
var circleC = 0;
var circleD = 0;
var circleE = 0;
var circleF = 0;

//=* posiciones en x marcadores
var axPos = 0;
var bxPos = 0;
var cxPos = 0;
var dxPos = 0;
var exPos = 0;
var fxPos = 0;

//=* posiciones en y marcadores
var ayPos = 0;
var byPos = 0;
var cyPos = 0;
var dyPos = 0;
var eyPos = 0;
var fyPos = 0;

//=* variables para los sonidos

let pipe1;
let pipe2;
let pipe3;
let pipe4;
let pipe5;
let pipe6;

////////////////////////////////////////////////// 

/*
==*Música por Mativve.*==
Audios recuperados de: https://freesound.org/people/Mativve/sounds/416778/
Mativve Web: https://freesound.org/people/Mativve/sounds/512808/
==*==
*/

//cargar notas//
function preload () {

  pipe1 = loadSound('notas/p5_1.mp3');
  pipe2 = loadSound('notas/p5_2.mp3');
  pipe3 = loadSound('notas/p5_3.mp3');
  pipe4 = loadSound('notas/p5_4.mp3');
  pipe5 = loadSound('notas/p5_5.mp3');
  pipe6 = loadSound('notas/p5_6.mp3');

}

//////////////////////////////////////////////////
function setup() {
  let canvas = createCanvas(500, 500);          //canvas
  fondo = background(235,33,93);
  serial = new p5.SerialPort();    // make a new instance of the serialport library
  serial.on('list', printList);    // set a callback function for the serialport list event
  serial.on('connected', serverConnected); // callback for connecting to the server
  serial.on('open', portOpen);     // callback for the port opening
  serial.on('data', serialEvent);  // callback for when new data arrives
  serial.on('error', serialError); // callback for errors
  serial.on('close', portClose);   // callback for the port closing
  serial.list();                   // list the serial ports
    serial.open(portName);              // open a serial port
}
//////////////////////////////////////////////////
function serverConnected() {
  console.log('connected to server.');
}
 
function portOpen() {
  console.log('the serial port opened.')
}
 
function serialError(err) {
  console.log('Something went wrong with the serial port. ' + err);
}
 
function portClose() {
  console.log('The serial port closed.');
}

// lista de puertos disponibles:
function printList(portList) {
  // portList es un array con los nombres de los puertos seriales
  for (var i = 0; i < portList.length; i++) {
    // mostrar la lista de puertos en la consola:
    console.log(i + portList[i]);
  }
}
//////////////////////////////////////////////////

function serialEvent() {
  // leer string hasta el salto de línea
  var inString = serial.readStringUntil('\r\n');
 
  if (inString.length > 0 ) {
    var sensors = split(inString, ','); //dividir string
    if (sensors.length > 5) {            
      circleA = sensors[0];     
      circleB = sensors[1];      
      circleC = sensors[2];      
      circleD = sensors[3];      
      circleE = sensors[4];     
      circleF = sensors[5]; //botón de papel
    }
  }
}

function draw() {
  angleMode(DEGREES)
  
  //Círculo azul pequeño claro
  if(circleA==0){
   noStroke();
   fill(86,211,242);
   ellipse(random(0,width),ayPos,20,20);
   axPos=axPos+50;
    
    //reproducir nota
      pipe6.play();
   }
  
  //cuadrados verdes
  if(circleB==0){
   push();
   rotate(40);
   strokeWeight(8);
   stroke(41,182,88);
   //fill(253,65,1);
   fill(41,182,88);
   rect(bxPos,byPos,60,60);
   bxPos=bxPos+80;
   pop();
    
    //reproducir nota
      pipe1.play();
     }
  
  //Tomate
  if(circleC==0){
 /*
   noStroke();
   fill(253,65,1);
   circle(cxPos,cyPos,40);*/
    
   fill(34,255,219);
   textSize(62);
   noStroke();
   text('*',cxPos-15,random(0,height));
    
    cxPos=cxPos+100;
    
    //reproducir nota
      pipe2.play();
   }
  
  //Línea amarilla
   if(circleD==0){
   strokeWeight(10);
   stroke(249,192,23);
   line(random(0,width),random(0,height),dxPos,dyPos);
  /*circle(dxPos,dyPos,40);
   dxPos=dxPos+50;*/
     
     //reproducir nota
      pipe3.play();
   }
  
  //círculos azules grandes
  if(circleE==0){
   noStroke();
   fill(35,108,233);
   circle(random(0,width),random(0,height),200);
   exPos=exPos+50;
    
    //reproducir nota
      pipe4.play();
   }

  //círculos rosados grandes
  if(circleF==0){
   noStroke();
   fill(235,33,93);
   circle(random(0,width),random(0,height),200);
   fxPos=fxPos+50;
    
    //reproducir nota
      pipe5.play();
   }
  
  //Si se desborda en x, volver al inicio de la pantalla y bajar.
  if (axPos >= width || bxPos >= width || cxPos >= width || dxPos >= width || exPos >= width || fxPos >= width) {
    axPos = 0;
        ayPos = ayPos + 50;

    bxPos = 0;
        byPos = byPos + 90;

    cxPos = 0;
        cyPos = cyPos + 50;

    dxPos = 0;
        dyPos = dyPos + 50;

    exPos = 0;
        eyPos = eyPos + 50;

    fxPos = 0;
        fyPos = fyPos + 50;
  }
  
//Si se desborda en y, volver al inicio de la pantalla y desplazarse ligeramente en x. 
  if (ayPos >= height || /*byPos >= height ||*/ cyPos >= height || dyPos >= height || eyPos >= height || fyPos >= height){
    ayPos = 0;
    byPos = 0;
    cyPos = 0;
    dyPos = 0;
    eyPos = 0;
    fyPos = 0;
  }
}

function mousePressed(setup) {
saveCanvas(canvas, 'Mi_Canvas_', 'jpg');
  background(235,33,93);
}
